<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
	onload="init(evt)" width="100%" height="100%" viewBox="0 0 400 400"
	version="1.1" preserveAspectRatio="xMinYMin meet">
	<!-- svg frame supporting dynamic svg load
	 provides pan and zoom functionality -->
	<script type="text/ecmascript"><![CDATA[
        var svgns = "http://www.w3.org/2000/svg";
        var svgRoot;
        var pTrans;
        var inPan=false;
        var stateOrigin; //start of pan
        var fitScale=zoomScale=1;
        var cuthere; //node where svg is loaded
        
        function init(e) {
            svgRoot =  e.target;
            pTrans=svgRoot.createSVGPoint();
            stateOrigin=svgRoot.createSVGPoint();
            var onMouseUp=function(evt){
                inPan=false;
            //   console.log("handleMouseUp")
            };
            var onMouseDown=function(evt){
                inPan=true; 
                var p2=getEventPoint(evt,true)
                stateOrigin.x=pTrans.x-(p2.x/zoomScale);
                stateOrigin.y=pTrans.y-(p2.y/zoomScale);
            //  console.log("handleMouseDown")
            };
            var onMouseLeave=function(evt){
                //inPan=false;
            };
            var onMouseMove=function(evt){
             
              if(inPan){
               var p2=getEventPoint(evt,true);
            //   console.log("PAN>>",pTrans.x,pTrans.y)
               pTrans.x=stateOrigin.x+(p2.x/zoomScale);
               pTrans.y=stateOrigin.y+(p2.y/zoomScale);
               update();
              }else{
			   show_coords(evt);
			  }
            };
             /**
             * Handle mouse wheel event.
             */
            var onMouseWheel = function (evt) {
                if (evt.preventDefault) {
                    evt.preventDefault();
                }
                evt.returnValue = false;
                var delta = evt.wheelDelta ? evt.wheelDelta / 360 : evt.detail / -9;
                //console.log("mousewheel",delta);
                updateScale((delta>0)?1.1:0.9,evt);
                return;
            };
            
    
            svgRoot.addEventListener('mouseup', onMouseUp, false );
            svgRoot.addEventListener('mousedown', onMouseDown, false );
            svgRoot.addEventListener('mousemove', onMouseMove,false );
            svgRoot.addEventListener('mouseleave', onMouseMove,false );
			
			if(navigator.userAgent.toLowerCase().indexOf('webkit') >= 0)
                window.addEventListener('mousewheel', onMouseWheel, false); // Chrome/Safari
            else
                window.addEventListener('DOMMouseScroll', onMouseWheel, false); // Others
			
            
            cuthere=document.getElementById("gInsertSVG");
            cuthere.addEventListener ( 'DOMNodeInserted', onNodeInsert, false );
        };
        
        // fix up scale when new svg loaded
        function onNodeInsert(e){
          reset(true)
        };
        
        function translate(dx,dy){
            pTrans.x+=dx;pTrans.y+=dy
            update();   
        };
    
        function update(){
          var s=fitScale*zoomScale 
          var k = svgRoot.createSVGMatrix().scale(s).translate(pTrans.x,pTrans.y);
          setCTM(cuthere,k)
          showState();
        };
        
        function updateScale(d,evt){
           var scalePoint;
           if(evt){
            scalePoint=getEventPoint(evt,true)
           }else{
            scalePoint= svgRoot.createSVGPoint();scalePoint.x=200;scalePoint.y=200;
           }
          // console.log("scale: ",scalePoint.x,scalePoint.y);
            zoomScale=zoomScale*d;
            pTrans.x+=(1-d)*scalePoint.x;
            pTrans.y+=(1-d)*scalePoint.y;
            update();
        };
        
        function reset(fit){
            pTrans.x=0;pTrans.y=0;zoomScale=1;
            if(fit){
              
              var bb=getSVGrect(cuthere);
              fitScale=400/Math.max(bb.width,bb.height)
            }else{
                fitScale=1;
            }   
            update();            
        };
        
        function getSVGrect(node){
            
            //var r=node.getBBox();
            var svg=cuthere.firstChild 
            var r=svgRoot.createSVGRect()
            r.width=svg.width.baseVal.value
            r.height=svg.height.baseVal.value

            return r;
        };
        /**
         * Sets the current transform matrix of an element.
         */
        setCTM = function (element, matrix) {
            var s = "matrix(" + matrix.a + "," + matrix.b + "," + matrix.c + "," + matrix.d + "," + matrix.e + "," + matrix.f + ")";
            element.setAttribute("transform", s);
        };
        function getEventPoint(evt,userSpace){
            var p1 = svgRoot.createSVGPoint();
            p1.x = evt.clientX;
            p1.y = evt.clientY;
            if(userSpace){
                var ctm = evt.target.getScreenCTM();
                if (ctm = ctm.inverse()){
                    p1 = p1.matrixTransform(ctm);
                }else{
                alert("no inservse");
                }
            };
            return p1
        };
      function showState(){
	    var tspans =svgRoot.getElementById("coords").getElementsByTagNameNS(svgns, "tspan");
		tspans.item(9).firstChild.data = pTrans.x.toFixed(2);
		tspans.item(11).firstChild.data = pTrans.y.toFixed(2);	
		tspans.item(13).firstChild.data = zoomScale.toFixed(2);
		tspans.item(15).firstChild.data = fitScale.toFixed(2);
		};
		
      function show_coords(e) {
            var p1 = getEventPoint(e,true);     
            // Show the results
            var tspans =svgRoot.getElementById("coords").getElementsByTagNameNS(svgns, "tspan");
            
            tspans.item(1).firstChild.data = e.clientX;
            tspans.item(3).firstChild.data = e.clientY;
            tspans.item(5).firstChild.data = p1.x.toFixed(2);
            tspans.item(7).firstChild.data = p1.y.toFixed(2);
            showState();
            }
     ]]></script>
	<rect x="0" y="0" width="100%" height="100%" fill="none" stroke-width="1" stroke="none"/>
	<g id="gInsertSVG" />

	<rect x="0" y="0" width="100%" height="100%" fill="transparent" />
	<g id="hud" transform="translate(10,10)">
		<rect x="0" y="0" width="400" height="40" fill="blue" opacity="0.6" rx="6" ry="6" />
		
		<g onclick="updateScale(1.1)" transform="translate(1,2)">
		    <title>+ zoom</title>
			<rect  width="12" height="12" fill="orange"/>
			<text  y="10">+</text>
		</g>
		<g onclick="updateScale(0.9)"  transform="translate(14,2)">
		    <title>- zoom</title>
			<rect  width="12" height="12" fill="orange"/>
			<text y="10">-</text>
		</g>
		
		<g onclick="reset(true)"  transform="translate(0,16)">
		  <title>Fit to window</title>
		  <rect width="12" height="12" fill="orange" />
		</g>
		
		<g onclick="reset(false)"  transform="translate(14,16)">
			<title>Display at 'natural' size</title>
			<rect width="12" height="12" fill="orange"/>
		</g>
		
		<text id="coords" fill="white" transform="translate(25,5)"
			pointer-events="none">
			<tspan x="0" dy="10pt">Client X= </tspan>
			<tspan>?</tspan>
			<tspan x="0" dy="10pt">Client Y= </tspan>
			<tspan>?</tspan>
			<tspan x="100" dy="-10pt">User X= </tspan>
			<tspan>?</tspan>
			<tspan x="100" dy="10pt">User Y= </tspan>
			<tspan>?</tspan>
			<tspan x="200" dy="-10pt">pTransX= </tspan>
			<tspan>?</tspan>
			<tspan x="200" dy="10pt">pTransY= </tspan>
			<tspan>?</tspan>
			<tspan x="300" dy="-10pt">zoom= </tspan>
			<tspan>?</tspan>
			<tspan x="300" dy="10pt">fit= </tspan>
			<tspan>?</tspan>
		</text>
	</g>
</svg>